  // if (type == 'O') {
    //     height = 2;
    //     width = 2;

    //     for (int i = 0; i < height; ++i) {
    //         for (int j = 0; i < width; ++i) {
    //             parts.emplace_back(Cell{i + 3, j, true, type, this, player});
    //         }
    //     }
    // }
    // else if (type == 'I') {
    //     height = 1;
    //     width = 4;

    //     for (int i = 0; i < height; ++i) {
    //         for (int j = 0; i < width; ++i) {
    //             parts.emplace_back(Cell{i + 3, j, true, type, this, player});
    //         }
    //     }
    // }
    // else if (type == 'J') {
    //     height = 2;
    //     width = 3;

    //     parts.emplace_back(Cell{0 + 3, 0, true, type, this, player});

    //     // cells [0,1] and [0,2] are unfilled cells, with no owner.
    //     parts.emplace_back(Cell{0 + 3, 1, false, 'E', nullptr, player});
    //     parts.emplace_back(Cell{0 + 3, 2, false, 'E', nullptr, player});

    //     parts.emplace_back(Cell{1 + 3, 0, true, type, this, player});
    //     parts.emplace_back(Cell{1 + 3, 1 , true, type, this, player});
    //     parts.emplace_back(Cell{1 + 3, 2, true, type, this, player});
    // }
    // else if (type == 'L') {
    //     height = 2;
    //     width = 3;

    //     // cells [0,0] and [0,1] are unfilled cells, with no owner.
    //     parts.emplace_back(Cell{0+3,0,false,'E', nullptr, player});
    //     parts.emplace_back(Cell{0+3,1,false,'E', nullptr, player});

    //     parts.emplace_back(Cell{0+3,2,true,type, this, player});
    //     parts.emplace_back(Cell{1+3,0,true,type, this, player});
    //     parts.emplace_back(Cell{1+3,1,true,type, this, player});
    //     parts.emplace_back(Cell{1+3,2,true,type, this, player});
    // }
    // else if (type == 'T') {
    //     height = 2;
    //     width = 3;


    //     parts.emplace_back(Cell{0+3,0,true,type, this, player});
    //     parts.emplace_back(Cell{0+3,1,true,type, this, player});
    //     parts.emplace_back(Cell{0+3,2,true,type, this, player});

    //     // cells [1,0] and [1,2] are unfilled cells, with no owner.
    //     parts.emplace_back(Cell{1+3,0,false,'E', nullptr, player});
    //     parts.emplace_back(Cell{1+3,1,true,type, this, player});
    //     parts.emplace_back(Cell{1+3,2,false,'E', nullptr, player});
    // }
    // else if (type == 'Z') {
    //     height = 2;
    //     width = 3;

    //     // we create unfilled cells similar to the pattern above

    //     parts.emplace_back(Cell{0+3,0,true,type, this, player});
    //     parts.emplace_back(Cell{0+3,1,true,type, this, player});
    //     parts.emplace_back(Cell{0+3,2,false,'E', nullptr, player});

    //     parts.emplace_back(Cell{1+3,0,false,'E', nullptr, player});
    //     parts.emplace_back(Cell{1+3,1,true,type, this, player});
    //     parts.emplace_back(Cell{1+3,2,true,type, this, player});
    // }
    // else if (type == 'S') {
    //     height = 2;
    //     width = 3;

    //     // we create unfilled cells similar to the pattern above

    //     parts.emplace_back(Cell{0+3,0,false,'E', nullptr, player});
    //     parts.emplace_back(Cell{0+3,1,true,type, this, player});
    //     parts.emplace_back(Cell{0+3,2,true,type, this, player});

    //     parts.emplace_back(Cell{1+3,0,true,type, this, player});
    //     parts.emplace_back(Cell{1+3,1,true,type, this, player});
    //     parts.emplace_back(Cell{1+3,2,false,'E', nullptr, player});
    // }
    // else {
    //     // throw an exception maybe
    // }